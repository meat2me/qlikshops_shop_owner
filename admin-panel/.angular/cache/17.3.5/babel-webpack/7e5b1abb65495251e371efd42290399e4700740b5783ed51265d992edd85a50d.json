{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { TimeoutError, of } from 'rxjs';\nimport { timeout, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let ErrorHandlerInterceptor = /*#__PURE__*/(() => {\n  class ErrorHandlerInterceptor {\n    constructor() {\n      this.requestTimeout = 120 * 1000;\n    }\n    intercept(request, next) {\n      const params = request.params;\n      return next.handle(request).pipe(timeout(this.requestTimeout), catchError(event => {\n        if (!params.supressError) {\n          if (event instanceof TimeoutError) {\n            this.showToast('Request time out!');\n          } else if (event instanceof HttpErrorResponse) {\n            this.showToast(event.error.message);\n          } else {}\n        }\n        return of(event);\n      }));\n    }\n    showToast(message) {\n      // this.toastrService.error(message);\n    }\n    static #_ = this.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n      return new (t || ErrorHandlerInterceptor)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorHandlerInterceptor,\n      factory: ErrorHandlerInterceptor.ɵfac\n    });\n  }\n  return ErrorHandlerInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}