{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { Logout } from '@core/redux/actions/auth.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport let AppDefaultsInterceptor = /*#__PURE__*/(() => {\n  class AppDefaultsInterceptor {\n    constructor(store) {\n      this.store = store;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(tap(event => {\n        // tslint:disable-next-line: no-string-literal\n        const body = event['body'];\n        if (body && (body.rc === 102 || body.rc === 201) && body.message === 'invalid user token') {\n          this.store.dispatch(new Logout());\n        } else if (body && body.rc > 0) {\n          this.showToast(body.message);\n        }\n      }));\n    }\n    showToast(message) {\n      // this.toastrService.error(message);\n    }\n    static #_ = this.ɵfac = function AppDefaultsInterceptor_Factory(t) {\n      return new (t || AppDefaultsInterceptor)(i0.ɵɵinject(i1.Store));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AppDefaultsInterceptor,\n      factory: AppDefaultsInterceptor.ɵfac\n    });\n  }\n  return AppDefaultsInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}