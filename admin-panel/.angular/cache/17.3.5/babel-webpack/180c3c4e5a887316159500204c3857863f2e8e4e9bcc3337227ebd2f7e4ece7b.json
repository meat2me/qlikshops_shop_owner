{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let BreadcrumbService = /*#__PURE__*/(() => {\n  class BreadcrumbService {\n    constructor(router, activeRoute) {\n      this.router = router;\n      this.activeRoute = activeRoute;\n      this.breadCrumbSub = new ReplaySubject(1);\n      this.breadcrumbs = [];\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd), distinctUntilChanged(), map(() => this.buildBreadCrumb(this.activeRoute.root)), tap(b => this.breadcrumbs = b)).subscribe(v => this.breadCrumbSub.next(v));\n    }\n    buildBreadCrumb(route, url = '', breadcrumbs = []) {\n      // If no routeConfig is available we are on the root path\n      const label = route.routeConfig ? route.routeConfig.data?.breadcrumb : 'navigation.home';\n      // const path: string = route.routeConfig ? route.routeConfig.path : '';\n      const path = route.snapshot.url.map(x => x.path).filter(p => p !== '').join('/');\n      const unclickable = route.routeConfig ? route.routeConfig.data?.unclickable : false;\n      const usePrevUrl = route.routeConfig ? route.routeConfig.data?.usePrevUrl : false;\n      if (!label) {\n        const nextPath = path === '' ? url : `${url}/${path}`;\n        return route.firstChild ? this.buildBreadCrumb(route.firstChild, nextPath, breadcrumbs) : breadcrumbs;\n      }\n      const nextUrl = `${url}/${path}`.replace('//', '/');\n      let breadcrumbUrl = '';\n      if (usePrevUrl) {\n        const prevBreadcrumb = breadcrumbs[breadcrumbs.length - 1];\n        breadcrumbUrl = prevBreadcrumb?.url || nextUrl;\n      } else {\n        breadcrumbUrl = nextUrl;\n      }\n      const breadcrumb = {\n        label,\n        url: breadcrumbUrl,\n        unclickable\n      };\n      const newBreadcrumbs = [...breadcrumbs, breadcrumb];\n      if (route.firstChild) {\n        // If we are not on our current path yet,\n        // there will be more children to look after, to build our breadcrumb\n        return this.buildBreadCrumb(route.firstChild, nextUrl, newBreadcrumbs);\n      }\n      return newBreadcrumbs;\n    }\n    pushBreadcrumb(breadcrumb) {\n      this.breadCrumbSub.next([...this.breadcrumbs, breadcrumb]);\n    }\n    static #_ = this.ɵfac = function BreadcrumbService_Factory(t) {\n      return new (t || BreadcrumbService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BreadcrumbService,\n      factory: BreadcrumbService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BreadcrumbService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}