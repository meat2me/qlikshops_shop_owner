{"ast":null,"code":"import _asyncToGenerator from \"/Users/roipk/Documents/TeamWork/qlikshops_shop_owner/admin-panel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let UploadDirective = /*#__PURE__*/(() => {\n  class UploadDirective {\n    constructor() {\n      this.accept = '';\n      this.errorMsg = 'File is not supported';\n      this.onFiles = new EventEmitter();\n      this.onError = new EventEmitter();\n    }\n    onClick($event) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const files = $event.target.files;\n        try {\n          if (_this.validate(files)) {\n            _this.onFiles.emit(files);\n          } else {\n            throw Error(_this.errorMsg);\n          }\n        } catch (err) {\n          $event.target.value = '';\n          _this.onError.emit(err);\n        }\n      })();\n    }\n    validate(files) {\n      let accepted = true;\n      if (this.accept.trim()) {\n        const regexps = this.accept.replace(/\\s/g, '').split(',').map(accept => new RegExp(accept.replace('*', '.*')));\n        for (const file of Array.from(files)) {\n          accepted = regexps.findIndex(regex => regex.test(file.type)) !== -1;\n        }\n      }\n      return accepted;\n    }\n    static #_ = this.ɵfac = function UploadDirective_Factory(t) {\n      return new (t || UploadDirective)();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: UploadDirective,\n      selectors: [[\"\", \"appUpload\", \"\"]],\n      hostBindings: function UploadDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function UploadDirective_change_HostBindingHandler($event) {\n            return ctx.onClick($event);\n          });\n        }\n      },\n      inputs: {\n        accept: \"accept\",\n        errorMsg: \"errorMsg\"\n      },\n      outputs: {\n        onFiles: \"onFiles\",\n        onError: \"onError\"\n      }\n    });\n  }\n  return UploadDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}