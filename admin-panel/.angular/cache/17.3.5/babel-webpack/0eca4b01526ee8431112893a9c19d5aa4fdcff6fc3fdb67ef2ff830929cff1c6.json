{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BaseService } from './base.service';\nimport { tap } from 'rxjs/operators';\nimport { fromObj } from 'app/utils/from-object';\nimport { ReplaySubject } from 'rxjs';\nimport { mapDash } from 'app/utils/map-dash-data';\nimport * as i0 from \"@angular/core\";\nexport let StoreService = /*#__PURE__*/(() => {\n  class StoreService extends BaseService {\n    constructor() {\n      super(...arguments);\n      this.accountInfoSub = new ReplaySubject(1);\n      this.updateNavbar = new EventEmitter();\n      this.updateSidebar = new EventEmitter();\n      this.updateDashboard = new EventEmitter();\n    }\n    getAllStore() {\n      return this.post({\n        request: 'admin_get_all_stores'\n      });\n    }\n    fetchDashboard() {\n      this.updateDashboard.emit(true);\n    }\n    getNavChange(event) {\n      this.updateNavbar.emit(event);\n    }\n    getSidebarChange(event) {\n      this.updateSidebar.emit(event);\n    }\n    addStore(req) {\n      return this.post({\n        ...req,\n        request: 'add_store'\n      });\n    }\n    getAccountInfo() {\n      this.post({\n        request: 'get_account_info'\n      }).subscribe(v => this.accountInfoSub.next(v));\n      return this.accountInfo$ || (this.accountInfo$ = this.accountInfoSub.asObservable());\n    }\n    updateAccountInfo(req) {\n      return this.post({\n        ...req,\n        request: 'update_account_info'\n      });\n    }\n    getStoreInfo(store_id) {\n      console.log(store_id);\n      return this.post({\n        request: 'get_store',\n        store_id\n      }).pipe(tap(this.mapSelects));\n    }\n    getStoreMetadata() {\n      return this.post({\n        request: 'get_store_metadata'\n      });\n    }\n    getDashboard(id) {\n      return this.post({\n        request: 'get_dashboard_data',\n        store_id: id\n      }).pipe(tap(this.mapDashboardData));\n    }\n    mapDashboardData(res) {\n      res.clients_per_month = mapDash(res.clients_per_month);\n      res.orders_per_month = mapDash(res.orders_per_month);\n    }\n    mapSelects(res) {\n      res.languages = fromObj(res.languages);\n      res.countries = fromObj(res.countries);\n      res.store_categories = fromObj(res.store_categories);\n      res.themes = fromObj(res.themes);\n    }\n    updateStore(req, store_id, user_type) {\n      if (user_type === 1) {\n        return this.post({\n          request: 'update_store',\n          store_id,\n          ...req\n        });\n      }\n      if (user_type === 3) {\n        return this.post({\n          request: 'owner_update_store',\n          store_id,\n          ...req\n        });\n      }\n    }\n    setStatus(store_id, is_online) {\n      return this.post({\n        request: 'set_store_online',\n        store_id,\n        is_online\n      });\n    }\n    removeOwner(user_phone) {\n      return this.post({\n        request: 'delete_user_owner_store',\n        user_phone\n      });\n    }\n    static #_ = this.ɵfac = /*@__PURE__*/(() => {\n      let ɵStoreService_BaseFactory;\n      return function StoreService_Factory(t) {\n        return (ɵStoreService_BaseFactory || (ɵStoreService_BaseFactory = i0.ɵɵgetInheritedFactory(StoreService)))(t || StoreService);\n      };\n    })();\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StoreService,\n      factory: StoreService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return StoreService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}