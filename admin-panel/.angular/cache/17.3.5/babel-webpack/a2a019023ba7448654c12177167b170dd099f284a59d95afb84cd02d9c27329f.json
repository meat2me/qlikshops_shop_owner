{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Effect, ofType } from '@ngrx/effects';\nimport { map, switchMap } from 'rxjs/operators';\n// tslint:disable-next-line: max-line-length\nimport { LOGIN, LogInFailure, LogInSuccess, LOGOUT, REGISTRATION, RegistrationFailure, RegistrationSuccess } from '../actions/auth.action';\n// tslint:disable-next-line: max-line-length\nimport { selectAuthState } from '../app.states';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ngrx/store\";\nexport class AuthEffects {\n  constructor(actions, authService, router, store) {\n    this.actions = actions;\n    this.authService = authService;\n    this.router = router;\n    this.store = store;\n    this.Login = this.actions.pipe(ofType(LOGIN), map(action => action.payload), switchMap(payload => {\n      return this.authService.logIn(payload.auth_key);\n    }), map(user => {\n      // tslint:disable-next-line: no-string-literal\n      if (user['message'] === 'success') {\n        if (user['store_id']) {\n          localStorage.setItem('store_id', user['store_id']);\n        }\n        return new LogInSuccess({\n          ...user\n        });\n      } else {\n        // tslint:disable-next-line: no-string-literal\n        return new LogInFailure({\n          error: user['message']\n        });\n      }\n    }));\n    this.Registration = this.actions.pipe(ofType(REGISTRATION), map(action => action.payload), switchMap(payload => {\n      return this.authService.registration({\n        // tslint:disable-next-line: no-string-literal\n        auth_key: payload['auth_key'],\n        name: 'quy'\n      });\n    }), map(user => {\n      // tslint:disable-next-line: no-string-literal\n      if (user['message'] === 'success') {\n        return new RegistrationSuccess({\n          ...user\n        });\n      } else {\n        // tslint:disable-next-line: no-string-literal\n        return new RegistrationFailure({\n          error: user['message']\n        });\n      }\n    }));\n    this.LogOut = this.actions.pipe(ofType(LOGOUT), map(() => {\n      this.authService.logout();\n      this.router.navigate(['/auth/login']);\n    }));\n    this.store.select(selectAuthState).subscribe(state => {\n      // tslint:disable-next-line: no-string-literal\n      if (state['isAuthenticated']) {\n        // tslint:disable-next-line: no-string-literal\n        this.user = state['user'];\n      } else {\n        this.user = null;\n      }\n    });\n  }\n  static #_ = this.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n}\n__decorate([Effect()], AuthEffects.prototype, \"Login\", void 0);\n__decorate([Effect()], AuthEffects.prototype, \"Registration\", void 0);\n__decorate([Effect({\n  dispatch: false\n})], AuthEffects.prototype, \"LogOut\", void 0);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}