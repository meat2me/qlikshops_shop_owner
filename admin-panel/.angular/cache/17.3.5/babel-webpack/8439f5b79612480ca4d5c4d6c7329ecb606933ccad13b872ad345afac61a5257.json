{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport { BaseComponent } from '@components/base/base.component';\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@components/tree-node/tree-node.component\";\nfunction TreeInputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.selectedNode[ctx_r2.bindLabel]);\n  }\n}\nfunction TreeInputComponent_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"span\", 15);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\nfunction TreeInputComponent_ng_container_13_app_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-tree-node\", 17);\n    i0.ɵɵlistener(\"setInitNode\", function TreeInputComponent_ng_container_13_app_tree_node_1_Template_app_tree_node_setInitNode_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.selectedNode = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"nodeData\", data_r5)(\"bindLabel\", ctx_r2.bindLabel)(\"bindValue\", ctx_r2.bindValue)(\"selectedValue\", ctx_r2.selectedValue)(\"selectedNode\", ctx_r2.selectedNode)(\"selectEmitter\", ctx_r2.selectEmitter);\n  }\n}\nfunction TreeInputComponent_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TreeInputComponent_ng_container_13_app_tree_node_1_Template, 1, 6, \"app-tree-node\", 16);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.nodeData);\n  }\n}\nfunction TreeInputComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-tree-node\", 17);\n    i0.ɵɵlistener(\"setInitNode\", function TreeInputComponent_ng_template_14_Template_app_tree_node_setInitNode_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.selectedNode = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"nodeData\", ctx_r2.nodeData)(\"bindLabel\", ctx_r2.bindLabel)(\"bindValue\", ctx_r2.bindValue)(\"selectedValue\", ctx_r2.selectedValue)(\"selectedNode\", ctx_r2.selectedNode)(\"selectEmitter\", ctx_r2.selectEmitter);\n  }\n}\nexport let TreeInputComponent = /*#__PURE__*/(() => {\n  class TreeInputComponent extends BaseComponent {\n    set nodeData(value) {\n      if (value) {\n        this._nodeData = value;\n      }\n    }\n    get nodeData() {\n      return this._nodeData;\n    }\n    get selectedValue() {\n      return this._selectedValue;\n    }\n    set selectedValue(value) {\n      this._selectedValue = value;\n      this.propagateChange(value);\n    }\n    get valueFromNode() {\n      return this.bindValue ? this.selectedNode[this.bindValue] : this.selectedNode;\n    }\n    constructor(cdr) {\n      super();\n      this.cdr = cdr;\n      this.show = false;\n      this.selectedNode = null;\n      this._nodeData = [];\n      this.bindValue = null;\n      this.bindLabel = 'name';\n      this.bindChildren = 'children';\n      this.placeholder = 'Select';\n      // tslint:disable-next-line: variable-name\n      this._selectedValue = null;\n      this.selectEmitter = new EventEmitter();\n      this.onSelect = new EventEmitter();\n      this.propagateChange = _ => {};\n      this.propagateTouch = _ => {};\n    }\n    ngOnInit() {\n      this.selectEmitter.pipe(takeUntil(this.destroyed$)).subscribe(this.handleSelection.bind(this));\n    }\n    ngOnChanges() {\n      this.cdr.detectChanges();\n    }\n    writeValue(value) {\n      if (value !== undefined) {\n        if (value !== this.selectedValue) {\n          this.selectedValue = value;\n        } else {}\n      }\n    }\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.propagateTouch = fn;\n    }\n    onToggle() {\n      if (this.isAdmin) {\n        this.propagateTouch();\n        this.show = !this.show;\n      }\n    }\n    onBlur() {\n      this.show = false;\n    }\n    handleSelection(node) {\n      this.show = false;\n      this.selectedNode = node;\n      this.selectedValue = this.valueFromNode;\n      this.onSelect.emit(this.selectedValue);\n    }\n    static #_ = this.ɵfac = function TreeInputComponent_Factory(t) {\n      return new (t || TreeInputComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TreeInputComponent,\n      selectors: [[\"app-tree-input\"]],\n      inputs: {\n        nodeData: \"nodeData\",\n        bindValue: \"bindValue\",\n        bindLabel: \"bindLabel\",\n        bindChildren: \"bindChildren\",\n        placeholder: \"placeholder\",\n        isAdmin: \"isAdmin\",\n        selectedValue: \"selectedValue\"\n      },\n      outputs: {\n        onSelect: \"onSelect\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => TreeInputComponent),\n        multi: true\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n      decls: 16,\n      vars: 7,\n      consts: [[\"main\", \"\"], [\"notSelected\", \"\"], [\"isObject\", \"\"], [1, \"tree-container\", 2, \"outline\", \"none!important\", \"position\", \"relative\", 3, \"blur\", \"tabIndex\"], [1, \"tree-select-container\", 3, \"click\"], [1, \"tree-value-container\", \"direction-right\"], [\"class\", \"tree-value\", 4, \"ngIf\", \"ngIfElse\"], [1, \"tree-input\"], [1, \"tree-arrow-wrapper\"], [1, \"tree-arrow\"], [1, \"tree-dropdown-panel\", \"tree-select-bottom\", \"direction-right\"], [1, \"tree-dropdown-panel-items\", \"scroll-host\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"tree-value\"], [1, \"tree-placeholder\"], [1, \"tree-value-label\"], [3, \"nodeData\", \"bindLabel\", \"bindValue\", \"selectedValue\", \"selectedNode\", \"selectEmitter\", \"setInitNode\", 4, \"ngFor\", \"ngForOf\"], [3, \"setInitNode\", \"nodeData\", \"bindLabel\", \"bindValue\", \"selectedValue\", \"selectedNode\", \"selectEmitter\"]],\n      template: function TreeInputComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 3, 0);\n          i0.ɵɵlistener(\"blur\", function TreeInputComponent_Template_div_blur_0_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onBlur());\n          });\n          i0.ɵɵelementStart(2, \"div\", 4);\n          i0.ɵɵlistener(\"click\", function TreeInputComponent_Template_div_click_2_listener() {\n            i0.ɵɵrestoreView(_r1);\n            const main_r2 = i0.ɵɵreference(1);\n            main_r2.click();\n            return i0.ɵɵresetView(ctx.onToggle());\n          });\n          i0.ɵɵelementStart(3, \"div\", 5);\n          i0.ɵɵtemplate(4, TreeInputComponent_div_4_Template, 3, 1, \"div\", 6)(5, TreeInputComponent_ng_template_5_Template, 3, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelement(7, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"span\", 8);\n          i0.ɵɵelement(9, \"span\", 9);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 10)(11, \"div\", 11)(12, \"div\");\n          i0.ɵɵtemplate(13, TreeInputComponent_ng_container_13_Template, 2, 1, \"ng-container\", 12)(14, TreeInputComponent_ng_template_14_Template, 1, 6, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          const notSelected_r7 = i0.ɵɵreference(6);\n          const isObject_r8 = i0.ɵɵreference(15);\n          i0.ɵɵproperty(\"tabIndex\", 2);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedNode)(\"ngIfElse\", notSelected_r7);\n          i0.ɵɵadvance(6);\n          i0.ɵɵstyleProp(\"display\", ctx.show ? \"initial\" : \"none\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.nodeData.length != undefined)(\"ngIfElse\", isObject_r8);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgIf, i2.TreeNodeComponent],\n      styles: [\".ng-arrow-up{border-width:0 5px 5px}.tree-select-container{height:36px;cursor:pointer;display:flex;outline:0;overflow:hidden;position:relative;width:100%;color:#333;background-color:#fff;border-radius:4px;border:1px solid #ccc;min-height:36px;align-items:center}.tree-value-container{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:flex;-webkit-box-flex:1;align-items:center;padding-left:10px;padding-right:10px;flex:1}.tree-placeholder{color:#999}.tree-value{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.tree-input{position:absolute;width:100%;top:5px;left:0;padding-left:10px;padding-right:50px}.tree-input input{box-sizing:content-box;background:none;border:0;display:none;box-shadow:none;outline:0;cursor:default;width:100%;top:5px;left:0;padding-right:50px}.tree-arrow-wrapper{cursor:pointer;position:relative;text-align:center;-webkit-user-select:none;user-select:none;width:25px;padding-right:5px}.tree-arrow-wrapper .tree-arrow{pointer-events:none;display:inline-block;height:0;width:0;position:relative;border-color:#999 transparent transparent;border-style:solid;border-width:5px 5px 2.5px}.tree-dropdown-panel.tree-select-bottom{top:100%;border-bottom-right-radius:4px;border-bottom-left-radius:4px;border-top-color:#e6e6e6;margin-top:-1px}.tree-dropdown-panel{box-sizing:border-box;position:absolute;opacity:1;width:100%;z-index:1040;-webkit-overflow-scrolling:touch}.tree-dropdown-panel{background-color:#fff;border:1px solid #ccc;box-shadow:0 1px #0000000f;left:0}.tree-dropdown-panel .scroll-host-items{overflow:hidden;overflow-y:auto;position:relative;display:block;-webkit-overflow-scrolling:touch}.tree-dropdown-panel .tree-dropdown-panel-items{display:block;height:auto;box-sizing:border-box;max-height:240px;overflow-y:auto}\\n\"],\n      encapsulation: 2\n    });\n  }\n  return TreeInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}