{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment as env } from '@env/environment';\nimport { selectAuthState } from '@core/redux/app.states';\nimport { NotifyModalComponent } from '@modals/notify-modal/notify-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nexport let BaseService = /*#__PURE__*/(() => {\n  class BaseService {\n    constructor(http, store, modalService) {\n      this.http = http;\n      this.store = store;\n      this.modalService = modalService;\n      this.customHeaders = new HttpHeaders();\n      this.getFile = (fileURL, options) => {\n        return this.http.get(fileURL, {\n          ...this.customHeaders,\n          ...options\n        }).pipe(map(response => response), catchError(errResp => this.handleError(errResp)));\n      };\n      this.customHeaders.append('Content-Type', 'application/json');\n      this.getToken().subscribe(token => {\n        this.token = token;\n      });\n      this.getStoreId().subscribe(store_id => {\n        this.store_id = store_id;\n      });\n    }\n    post(body, options) {\n      return this.http.post(env.URL, {\n        ...body,\n        token: this.token\n      }, {\n        ...this.customHeaders,\n        ...options\n      }).pipe(tap(res => {\n        if (res.rc) {\n          throw res;\n        }\n      }), catchError(errResp => this.handleError(errResp)));\n    }\n    get(params, options) {\n      let url = env.URL + (params ? '?' : '');\n      Object.keys(params).forEach((key, index) => {\n        if (params[key]) {\n          url += `${key}=${params[key]}`;\n        }\n      });\n      return this.http.get(url, {\n        ...this.customHeaders,\n        ...options\n      }).pipe(map(response => response), catchError(errResp => this.handleError(errResp)));\n    }\n    handleError(error) {\n      this.errorModal(error.message);\n      return throwError(error);\n    }\n    getToken() {\n      return this.store.select(selectAuthState).pipe(map(res => res.token));\n    }\n    getStoreId() {\n      return this.store.select(selectAuthState).pipe(map(res => res.store_id));\n    }\n    errorModal(errStr) {\n      const modalRef = this.modalService.open(NotifyModalComponent, {\n        centered: true\n      });\n      modalRef.componentInstance.title = 'modal.error';\n      modalRef.componentInstance.content = errStr;\n    }\n    static #_ = this.ɵfac = function BaseService_Factory(t) {\n      return new (t || BaseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.NgbModal));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BaseService,\n      factory: BaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}