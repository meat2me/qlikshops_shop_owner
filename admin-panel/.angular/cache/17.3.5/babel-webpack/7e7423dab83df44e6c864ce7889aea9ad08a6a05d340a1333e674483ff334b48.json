{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@services/language.service\";\nimport * as i2 from \"@angular/common\";\nfunction TreeNodeComponent_ng_container_3_app_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-tree-node\", 5);\n  }\n  if (rf & 2) {\n    const nodeData_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"bindLabel\", ctx_r1.bindLabel)(\"bindValue\", ctx_r1.bindValue)(\"bindChildren\", ctx_r1.bindChildren)(\"selectedValue\", ctx_r1.selectedValue)(\"level\", ctx_r1.level + 1)(\"paddingStep\", ctx_r1.paddingStep)(\"nodeData\", nodeData_r1)(\"selectedNode\", ctx_r1.selectedNode)(\"setInitNode\", ctx_r1.setInitNode)(\"selectEmitter\", ctx_r1.selectEmitter);\n  }\n}\nfunction TreeNodeComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, TreeNodeComponent_ng_container_3_app_tree_node_1_Template, 1, 10, \"app-tree-node\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.nodeData[ctx_r1.bindChildren]);\n  }\n}\nexport let TreeNodeComponent = /*#__PURE__*/(() => {\n  class TreeNodeComponent {\n    get selectedValue() {\n      return this._selectedValue;\n    }\n    set selectedValue(value) {\n      if (value !== null) {\n        this._selectedValue = value;\n        if (this.isSelected) {\n          this.setInitNode.emit(this.nodeData);\n        }\n      }\n    }\n    get isSelected() {\n      if (this.bindValue) {\n        return this.nodeData && this.nodeData[this.bindValue] === this.selectedValue;\n      }\n      return this.nodeData && this.selectedValue && this.nodeData === this.selectedValue;\n    }\n    constructor(langServ) {\n      this.langServ = langServ;\n      this._selectedValue = null;\n      this.nodeData = null;\n      this.bindLabel = 'label';\n      this.bindValue = null;\n      this.bindChildren = 'children';\n      this.level = 1;\n      this.paddingStep = 10; // in px\n      this.selectEmitter = new EventEmitter();\n      this.selectedNode = null;\n      this.setInitNode = new EventEmitter(true);\n      this.leftStyle = {\n        'padding-left.px': 0\n      };\n      this.rightStyle = {\n        'padding-right.px': 0\n      };\n    }\n    ngOnInit() {\n      this.leftStyle['padding-left.px'] = this.rightStyle['padding-right.px'] = this.level * this.paddingStep;\n    }\n    get isRTL() {\n      return this.langServ.isRtl;\n    }\n    static #_ = this.ɵfac = function TreeNodeComponent_Factory(t) {\n      return new (t || TreeNodeComponent)(i0.ɵɵdirectiveInject(i1.LanguageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TreeNodeComponent,\n      selectors: [[\"app-tree-node\"]],\n      inputs: {\n        selectedValue: \"selectedValue\",\n        nodeData: \"nodeData\",\n        bindLabel: \"bindLabel\",\n        bindValue: \"bindValue\",\n        bindChildren: \"bindChildren\",\n        level: \"level\",\n        paddingStep: \"paddingStep\",\n        selectEmitter: \"selectEmitter\",\n        selectedNode: \"selectedNode\",\n        setInitNode: \"setInitNode\"\n      },\n      outputs: {\n        setInitNode: \"setInitNode\"\n      },\n      decls: 4,\n      vars: 5,\n      consts: [[\"role\", \"button\", 1, \"tree-option\", \"direction-right\", 3, \"click\", \"ngStyle\"], [1, \"tree-option-label\"], [\"class\", \"tree-nodes\", 4, \"ngIf\"], [1, \"tree-nodes\"], [3, \"bindLabel\", \"bindValue\", \"bindChildren\", \"selectedValue\", \"level\", \"paddingStep\", \"nodeData\", \"selectedNode\", \"setInitNode\", \"selectEmitter\", 4, \"ngFor\", \"ngForOf\"], [3, \"bindLabel\", \"bindValue\", \"bindChildren\", \"selectedValue\", \"level\", \"paddingStep\", \"nodeData\", \"selectedNode\", \"setInitNode\", \"selectEmitter\"]],\n      template: function TreeNodeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"click\", function TreeNodeComponent_Template_div_click_0_listener() {\n            return ctx.selectEmitter.emit(ctx.nodeData);\n          });\n          i0.ɵɵelementStart(1, \"span\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(3, TreeNodeComponent_ng_container_3_Template, 2, 1, \"ng-container\", 2);\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"tree-option-selected\", ctx.isSelected);\n          i0.ɵɵproperty(\"ngStyle\", ctx.isRTL ? ctx.rightStyle : ctx.leftStyle);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.nodeData[ctx.bindLabel]);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.nodeData && (ctx.nodeData[ctx.bindChildren] == null ? null : ctx.nodeData[ctx.bindChildren].length));\n        }\n      },\n      dependencies: [i2.NgForOf, i2.NgIf, i2.NgStyle, TreeNodeComponent],\n      styles: [\".tree-option{padding:8px 10px}.tree-option.tree-option-marked,.tree-option:hover{background-color:#f5faff;color:#333}.tree-option.tree-option-selected,.tree-option.tree-option.tree-option-selected.tree-option-marked{color:#333;background-color:#ebf5ff}.tree-option.tree-option-selected .tree-option-label,.tree-option.tree-option.tree-option-selected.tree-option-marked .tree-option-label{font-weight:600}.tree-nodes{padding-left:10px}.tree-nodes:lang(he){padding-left:initial;padding-right:10px}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return TreeNodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}