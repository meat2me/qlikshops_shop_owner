{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let DndDirective = /*#__PURE__*/(() => {\n  class DndDirective {\n    constructor() {\n      this.accept = '';\n      this.preventBodyDrop = true;\n      this.onDragging = new EventEmitter();\n      this.onFileDrop = new EventEmitter();\n      this.onError = new EventEmitter();\n    }\n    validate(files) {\n      let accepted = true;\n      if (this.accept.trim()) {\n        const regexps = this.accept.replace(/\\s/g, '').split(',').map(accept => new RegExp(accept.replace('*', '.*')));\n        for (const file of Array.from(files)) {\n          accepted = regexps.findIndex(regex => regex.test(file.type)) !== -1;\n          if (!accepted) {\n            throw Error('File not supported');\n          }\n        }\n      }\n      return accepted;\n    }\n    onDragOver(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      this.onDragging.emit(true);\n    }\n    onDragLeave(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      this.onDragging.emit(false);\n    }\n    onDrop(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n      try {\n        const files = ev.dataTransfer.files;\n        if (files.length) {\n          this.validate(files);\n          this.onFileDrop.emit(files);\n        }\n      } catch (err) {\n        this.onError.emit(err);\n      }\n    }\n    onBodyDragOver(ev) {\n      if (this.preventBodyDrop) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n    onBodyDrop(event) {\n      if (this.preventBodyDrop) {\n        event.preventDefault();\n      }\n    }\n    static #_ = this.ɵfac = function DndDirective_Factory(t) {\n      return new (t || DndDirective)();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: DndDirective,\n      selectors: [[\"\", \"appDnd\", \"\"]],\n      hostBindings: function DndDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"dragover\", function DndDirective_dragover_HostBindingHandler($event) {\n            return ctx.onDragOver($event);\n          })(\"dragleave\", function DndDirective_dragleave_HostBindingHandler($event) {\n            return ctx.onDragLeave($event);\n          })(\"drop\", function DndDirective_drop_HostBindingHandler($event) {\n            return ctx.onDrop($event);\n          })(\"dragover\", function DndDirective_dragover_HostBindingHandler($event) {\n            return ctx.onBodyDragOver($event);\n          }, false, i0.ɵɵresolveBody)(\"drop\", function DndDirective_drop_HostBindingHandler($event) {\n            return ctx.onBodyDrop($event);\n          }, false, i0.ɵɵresolveBody);\n        }\n      },\n      inputs: {\n        accept: \"accept\",\n        preventBodyDrop: \"preventBodyDrop\"\n      },\n      outputs: {\n        onDragging: \"onDragging\",\n        onFileDrop: \"onFileDrop\",\n        onError: \"onError\"\n      }\n    });\n  }\n  return DndDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}